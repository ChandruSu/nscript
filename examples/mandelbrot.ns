
let std = import("std");

# optional command line argument to scale up visual.
let scale = 1.0;
if std.len(args) > 0 {
  scale = std.parseFloat(args[0] || "1.0");
}

let width = 120.0 * scale;
let height = 30.0 * scale;

# render window.
let x_min = -2.0;
let x_max = 1.0;
let y_min = -1.0;
let y_max = 1.0;

# sample increments.
let ydelta = (y_max - y_min) / height;
let xdelta = (x_max - x_min) / width;

# calculate mandelbrot value for one coordinate on
# complex plane. derived from pseudocode found: https://en.wikipedia.org/wiki/Mandelbrot_set
fun calculateMandelbrot(re, im) {
  let max_iter = 128;
  let zr = 0.0;
  let zi = 0.0;

  let n = 0;
  while (zr * zr + zi * zi <= 4.0) && (n < max_iter) {
    let temp = zr * zr - zi * zi + re;
    zi = 2.0 * zr * zi + im;
    zr = temp;
    n += 1;
  }
  
  return n;
}

# sample and render complex graph.
let y = y_min;
while y <= y_max {
  let x = x_min;
  
  while x <= x_max {
    let iter = calculateMandelbrot(x, y);
    std.print(if iter == 128 {"#"} else {" "});
    x += xdelta;
  }

  std.print("\n");
  y += ydelta;
}
 
